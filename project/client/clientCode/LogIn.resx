<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        UmqpsdGxrARJKz1rW/hVCsQoq1pSDZ//2Q==
</value>
  </data>
</root>