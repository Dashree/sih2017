import cv2
import numpy as np
import imutils
from imutils import contours


ANSWER_KEY = {0: 1, 1: 4, 2: 0, 3: 3, 4: 1}


#img=cv2.imread('omr_small.jpg',0)
img=cv2.imread('OMR3.jpg',0)
cv2.imshow('OMR3',img)

ret,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)

blur = cv2.GaussianBlur(th1,(5,5),0)
ret3,th3 = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)

ret,th2 = cv2.threshold(th3,127,255,cv2.THRESH_BINARY_INV)

#cv2.imshow('omr_bin',th1)  #img to binary
#cv2.imshow('omr_bin1',th3)  #otsu bin
cv2.imshow('omr_bin1',th3)  #inv binary

height, width = th2.shape[:2]
a=3204.0/height
b=2040.0/width

res = cv2.resize(th2,None,fx=a, fy=b, interpolation = cv2.INTER_CUBIC)
cv2.imshow('OMR_RESIZE',res)  #bin resized inverted

cv2.imwrite('new_OMR_RESIZE.jpg',res)  #saved resizing
cv2.waitKey()

cnts = cv2.findContours(res.copy(), cv2.RETR_EXTERNAL,
    cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if imutils.is_cv2() else cnts[1]
docCnt = None
 
# ensure that at least one contour was found
if len(cnts) > 0:
    # sort the contours according to their size in
    # descending order
    cnts = sorted(cnts, key=cv2.contourArea, reverse=True)
 
    # loop over the sorted contours
    for c in cnts:
        # approximate the contour
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
 
        # if our approximated contour has four points,
        # then we can assume we have found the paper
        if len(approx) == 4:
            docCnt = approx
        break


cnts = cv2.findContours(res.copy(), cv2.RETR_EXTERNAL,
    cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if imutils.is_cv2() else cnts[1]
questionCnts = []
 
# loop over the contours
for c in cnts:
    # compute the bounding box of the contour, then use the
    # bounding box to derive the aspect ratio
    (x, y, w, h) = cv2.boundingRect(c)
    ar = w / float(h)
 
    # in order to label the contour as a question, region
    # should be sufficiently wide, sufficiently tall, and
    # have an aspect ratio approximately equal to 1
    if w >= 20 and h >= 20 and ar >= 0.9 and ar <= 1.1:
        questionCnts.append(c)
        questionCnts = contours.sort_contours(questionCnts,method="top-to-bottom")[0]
        correct = 0
         
# each question has 5 possible answers, to loop over the
# question in batches of 5
for (q, i) in enumerate(np.arange(0, len(questionCnts), 4)):
    # sort the contours for the current question from
    # left to right, then initialize the index of the
    # bubbled answer
    cnts = contours.sort_contours(questionCnts[i:i + 4])[0]
    bubbled = None



    for (j, c) in enumerate(cnts):
        # construct a mask that reveals only the current
        # "bubble" for the question
        mask = np.zeros(res.shape, dtype="uint8")
        cv2.drawContours(mask, [c], -1, 255, -1)
 
        # apply the mask to the thresholded image, then
        # count the number of non-zero pixels in the
        # bubble area
        mask = cv2.bitwise_and(res, res, mask=mask)
        total = cv2.countNonZero(mask)
 
        # if the current total has a larger number of total
        # non-zero pixels, then we are examining the currently
        # bubbled-in answer
        if bubbled is None or total > bubbled[0]:
            bubbled = (total, j)
            color = (0, 0, 255)
            k = ANSWER_KEY[q]
 # check to see if the bubbled answer is correct
            if k == bubbled[1]:
                             color = (0, 255, 0)
                             correct += 1
                 # draw the outline of the correct answer on the test
                             cv2.drawContours(paper, [cnts[k]], -1, color, 3)
                # grab the test taker
                             score = (correct / 5.0) * 100
                             print("[INFO] score: {:.2f}%".format(score))
                             cv2.putText(paper, "{:.2f}%".format(score), (10, 30),
                             cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)
                             cv2.imshow("Original", img)
                             cv2.imshow("Exam", paper)
                             cv2.waitKey(0)
